using Datacute.IncrementalGeneratorExtensions;

namespace Datacute.SourceGeneratorContext;

public class CodeGenerator : SourceTextGeneratorBase<AttributeData>
{
    public CodeGenerator(
        in GeneratorSourceData source,
        in CancellationToken cancellationToken)
        : base(source.AttributeContext, cancellationToken)
    {
        // deconstruct the source data
        (
            var contextAndData,
            _globalOptionsDescription,
            _compilationDescription,
            _parseOptionsDescription,
            _additionalTextDescriptions,
            _metadataReferenceDescriptions
        ) = source;

        _contextData = contextAndData.AttributeData;
    }

    private readonly AttributeData _contextData;
    
    private readonly AnalyzerConfigOptionsDescription _globalOptionsDescription;
    private readonly CompilationDescription _compilationDescription;
    private readonly ParseOptionsDescription _parseOptionsDescription;
    private readonly EquatableImmutableArray<AdditionalTextDescription> _additionalTextDescriptions;
    private readonly EquatableImmutableArray<MetadataReferenceDescription> _metadataReferenceDescriptions;

    protected override string AutoGeneratedComment => Templates.AutoGeneratedComment;

    protected override void AppendDocComments()
    {
        Buffer.AppendLines(Templates.ClassDocCommentsBegin);

        if (_contextData.IncludeAttributeContextTargetSymbol || _contextData.IncludeSummary)
        {
            Buffer.AppendFormatLines(Templates.ClassDocCommentsSectionBegin, "GeneratorAttributeSyntaxContext TargetSymbol");
            Buffer.AppendLines(_contextData.TargetSymbolDocComments);
            Buffer.AppendLine(Templates.ClassDocCommentsSectionEnd);
        }

        if (_contextData.IncludeAttributeContextTypeSymbol && !string.IsNullOrEmpty(_contextData.TypeSymbolDocComments))
        {
            Buffer.AppendFormatLines(Templates.ClassDocCommentsSectionBegin, "GeneratorAttributeSyntaxContext TargetSymbol as ITypeSymbol");
            Buffer.AppendLines(_contextData.TypeSymbolDocComments);
            Buffer.AppendLine(Templates.ClassDocCommentsSectionEnd);
        }

        if (_contextData.IncludeAttributeContextNamedTypeSymbol && !string.IsNullOrEmpty(_contextData.NamedTypeSymbolDocComments))
        {
            Buffer.AppendFormatLines(Templates.ClassDocCommentsSectionBegin, "GeneratorAttributeSyntaxContext TargetSymbol as INamedTypeSymbol");
            Buffer.AppendLines(_contextData.NamedTypeSymbolDocComments);
            Buffer.AppendLine(Templates.ClassDocCommentsSectionEnd);
        }

        if (_contextData.IncludeAttributeContextTargetNode)
        {
            Buffer.AppendFormatLines(Templates.ClassDocCommentsSectionBegin, "GeneratorAttributeSyntaxContext TargetNode");
            Buffer.AppendLines(_contextData.TargetNodeDocComments);
            Buffer.AppendLine(Templates.ClassDocCommentsSectionEnd);
        }

        if (_contextData.IncludeAttributeContextAttributes)
        {
            Buffer.AppendFormatLines(Templates.ClassDocCommentsSectionBegin, "GeneratorAttributeSyntaxContext Attributes");
            Buffer.AppendLines(_contextData.AttributesDocComments);
            Buffer.AppendLine(Templates.ClassDocCommentsSectionEnd);
        }

        if (_contextData.IncludeAttributeContextAllAttributes)
        {
            Buffer.AppendFormatLines(Templates.ClassDocCommentsSectionBegin, "GeneratorAttributeSyntaxContext TargetSymbol AllAttributes()");
            Buffer.AppendLines(_contextData.AllAttributesDocComments);
            Buffer.AppendLine(Templates.ClassDocCommentsSectionEnd);
        }

        if (_contextData.IncludeGlobalOptions)
        {
            Buffer.AppendFormatLines(Templates.ClassDocCommentsSectionBegin, "AnalyzerConfigOptionsProvider GlobalOptions");
            Buffer.AppendLines(_globalOptionsDescription.DocComments);
            Buffer.AppendLine(Templates.ClassDocCommentsSectionEnd);
        }

        if (_contextData.IncludeCompilation)
        {
            Buffer.AppendFormatLines(Templates.ClassDocCommentsSectionBegin, "Compilation");
            Buffer.AppendLines(_compilationDescription.DocComments);
            Buffer.AppendLine(Templates.ClassDocCommentsSectionEnd);
        }

        if (_contextData.IncludeCompilationOptions)
        {
            Buffer.AppendFormatLines(Templates.ClassDocCommentsSectionBegin, "Compilation Options");
            Buffer.AppendLines(_compilationDescription.OptionsDocComments);
            Buffer.AppendLine(Templates.ClassDocCommentsSectionEnd);
        }

        if (_contextData.IncludeCompilationAssembly)
        {
            Buffer.AppendFormatLines(Templates.ClassDocCommentsSectionBegin, "Compilation Assembly");
            Buffer.AppendLines(_compilationDescription.AssemblyDocComments);
            Buffer.AppendLine(Templates.ClassDocCommentsSectionEnd);
        }

        if (_contextData.IncludeCompilationReferences)
        {
            Buffer.AppendFormatLines(Templates.ClassDocCommentsSectionBegin, "Compilation References");
            Buffer.AppendLines(_compilationDescription.ReferencesDocComments);
            Buffer.AppendLine(Templates.ClassDocCommentsSectionEnd);
        }

        if (_contextData.IncludeParseOptions)
        {
            Buffer.AppendFormatLines(Templates.ClassDocCommentsSectionBegin, "Parse Options");
            Buffer.AppendLines(_parseOptionsDescription.DocComments);
            Buffer.AppendLine(Templates.ClassDocCommentsSectionEnd);
        }

        if (_contextData.IncludeAdditionalTexts)
        {
            Buffer.AppendFormatLines(Templates.ClassDocCommentsSectionBegin, "Additional Texts");
            Buffer.AddComment("Number of Additional Texts", _additionalTextDescriptions.Length);
            foreach (var additionalTextDescription in _additionalTextDescriptions)
            {
                Buffer.AppendLines(additionalTextDescription.DocComments);
                if (_contextData.IncludeAdditionalTextsOptions)
                {
                    Buffer.AppendLines(additionalTextDescription.OptionsComments);
                }
            }
            Buffer.AppendLine(Templates.ClassDocCommentsSectionEnd);
        }

        if (_contextData.IncludeMetadataReferences)
        {
            Buffer.AppendFormatLines(Templates.ClassDocCommentsSectionBegin, "Metadata References");
            Buffer.AddComment("Number of Metadata References", _metadataReferenceDescriptions.Length);
            if (_metadataReferenceDescriptions.Length > 0)
            {
                Buffer.AddComment("Properties Kind, EmbedInteropTypes, Aliases", "[Skipped for brevity]");
            }
            foreach (var metadataReferenceDescription in _metadataReferenceDescriptions)
            {
                Buffer.AppendLines(metadataReferenceDescription.DocComments);
            }
            Buffer.AppendLine(Templates.ClassDocCommentsSectionEnd);
        }

        Buffer.AppendLine(Templates.ClassDocCommentsEnd);
    }
    
    protected override void AppendDiagnosticLogs()
    {
        Buffer.AppendLine();
        Buffer.Direct.AppendDiagnosticsComment(GeneratorStageDescriptions.GeneratorStageNameMap);
    }
}
