using System.Collections.Immutable;
using System.Text;
using Microsoft.CodeAnalysis;

namespace Datacute.SourceGeneratorContext;

public readonly struct CodeGenerator
{
    public CodeGenerator(
        in GeneratorSourceData source,
        in CancellationToken cancellationToken)
    {
        _attributeContext = source.Core.AttributeOptionsCompilationAndParseOptions.AttributeOptionsAndCompilation.AttributeAndOptions.AttributeContext;
        _globalOptionsDescription = source.Core.AttributeOptionsCompilationAndParseOptions.AttributeOptionsAndCompilation.AttributeAndOptions.Options;
        _compilationDescription = source.Core.AttributeOptionsCompilationAndParseOptions.AttributeOptionsAndCompilation.Compilation;
        _parseOptionsDescription = source.Core.AttributeOptionsCompilationAndParseOptions.ParseOptions;
        _additionalTextDescriptions = source.Core.AdditionalTexts;
        _metadataReferenceDescriptions = source.MetadataReferences;
        _cancellationToken = cancellationToken;
        _buffer = new StringBuilder();
    }

    private readonly AttributeContext _attributeContext;
    private readonly AnalyzerConfigOptionsDescription _globalOptionsDescription;
    private readonly CompilationDescription _compilationDescription;
    private readonly ParseOptionsDescription _parseOptionsDescription;
    private readonly ImmutableArray<AdditionalTextDescription> _additionalTextDescriptions;
    private readonly ImmutableArray<MetadataReferenceDescription> _metadataReferenceDescriptions;
    private readonly CancellationToken _cancellationToken;

    private readonly StringBuilder _buffer;

    public string GenerateSource()
    {
        _cancellationToken.ThrowIfCancellationRequested();
        _buffer.Clear();
        AutoGeneratedComment();
        StartNamespace();
        var indentLevel = ParentClasses();
        ClassDocComments(indentLevel);
        PartialTypeDeclaration(indentLevel);
        AppendStartClass(indentLevel);
        AppendEndClass(indentLevel);
        EndParentClasses();
        AppendDiagnosticLogs();
        return _buffer.ToString();
    }

    private void AutoGeneratedComment()
    {
        _buffer.AppendLine(Templates.AutoGeneratedComment);
    }

    private void StartNamespace()
    {
        if (_attributeContext.ContainingNamespaceIsGlobalNamespace) return;

        _buffer.Append("namespace ");
        _buffer.Append(_attributeContext.ContainingNamespaceDisplayString);
        _buffer.Append(';').AppendLine();
    }

    private int ParentClasses()
    {
        var indentLevel = 0;
        if (_attributeContext.HasParentClasses)
        {
            indentLevel = StartParentClasses();
        }
        return indentLevel;
    }

    private int StartParentClasses()
    {
        var indent = 0;
        foreach (var parentClass in _attributeContext.ParentClasses)
        {
            _buffer.Append(' ', indent);

            // Use the parent's actual accessibility
            var accessibilityModifier = GetAccessibility(parentClass.Accessibility);
            // Include static modifier if the parent class is static
            var staticModifier = parentClass.IsStatic ? "static " : "";
            var genericTypes = parentClass.TypeParameters.Any()
                ? $"<{string.Join(",", parentClass.TypeParameters)}>"
                : string.Empty;
            _buffer.AppendLine($"{accessibilityModifier}{staticModifier}partial {parentClass.RecordStructOrClass} {parentClass.Name}{genericTypes}");

            _buffer.Append(' ', indent);
            _buffer.AppendLine("{");
            indent += 4;
        }
        return indent;
    }

    private void ClassDocComments(int indent = 0)
    {
        var indentString = StringForIndent(indent);
        _buffer.AppendFormat(Templates.ClassDocCommentsBegin, indentString);

        if (_attributeContext.IncludeAttributeContextTargetSymbol || _attributeContext.IncludeAll || _attributeContext.IncludeSummary)
        {
            _buffer.AppendFormat(Templates.ClassDocCommentsSectionBegin, indentString, "GeneratorAttributeSyntaxContext TargetSymbol");
            AppendIndentedLines(indent, _attributeContext.TargetSymbolDocComments);
            _buffer.AppendFormat(Templates.ClassDocCommentsSectionEnd, indentString);
        }

        if ((_attributeContext.IncludeAttributeContextTypeSymbol || _attributeContext.IncludeAll) && !string.IsNullOrEmpty(_attributeContext.TypeSymbolDocComments))
        {
            _buffer.AppendFormat(Templates.ClassDocCommentsSectionBegin, indentString, "GeneratorAttributeSyntaxContext TargetSymbol as ITypeSymbol");
            AppendIndentedLines(indent,_attributeContext.TypeSymbolDocComments);
            _buffer.AppendFormat(Templates.ClassDocCommentsSectionEnd, indentString);
        }

        if ((_attributeContext.IncludeAttributeContextNamedTypeSymbol || _attributeContext.IncludeAll) && !string.IsNullOrEmpty(_attributeContext.NamedTypeSymbolDocComments))
        {
            _buffer.AppendFormat(Templates.ClassDocCommentsSectionBegin, indentString, "GeneratorAttributeSyntaxContext TargetSymbol as INamedTypeSymbol");
            AppendIndentedLines(indent, _attributeContext.NamedTypeSymbolDocComments);
            _buffer.AppendFormat(Templates.ClassDocCommentsSectionEnd, indentString);
        }

        if (_attributeContext.IncludeAttributeContextTargetNode || _attributeContext.IncludeAll)
        {
            _buffer.AppendFormat(Templates.ClassDocCommentsSectionBegin, indentString, "GeneratorAttributeSyntaxContext TargetNode");
            AppendIndentedLines(indent, _attributeContext.TargetNodeDocComments);
            _buffer.AppendFormat(Templates.ClassDocCommentsSectionEnd, indentString);
        }

        if (_attributeContext.IncludeAttributeContextAttributes || _attributeContext.IncludeAll)
        {
            _buffer.AppendFormat(Templates.ClassDocCommentsSectionBegin, indentString, "GeneratorAttributeSyntaxContext Attributes");
            AppendIndentedLines(indent, _attributeContext.AttributesDocComments);
            _buffer.AppendFormat(Templates.ClassDocCommentsSectionEnd, indentString);
        }

        if (_attributeContext.IncludeAttributeContextAllAttributes || _attributeContext.IncludeAll)
        {
            _buffer.AppendFormat(Templates.ClassDocCommentsSectionBegin, indentString, "GeneratorAttributeSyntaxContext TargetSymbol AllAttributes()");
            AppendIndentedLines(indent, _attributeContext.AllAttributesDocComments);
            _buffer.AppendFormat(Templates.ClassDocCommentsSectionEnd, indentString);
        }

        if (_attributeContext.IncludeGlobalOptions || _attributeContext.IncludeAll)
        {
            _buffer.AppendFormat(Templates.ClassDocCommentsSectionBegin, indentString, "AnalyzerConfigOptionsProvider GlobalOptions");
            AppendIndentedLines(indent, _globalOptionsDescription.DocComments);
            _buffer.AppendFormat(Templates.ClassDocCommentsSectionEnd, indentString);
        }

        if (_attributeContext.IncludeCompilation || _attributeContext.IncludeAll)
        {
            _buffer.AppendFormat(Templates.ClassDocCommentsSectionBegin, indentString, "Compilation");
            AppendIndentedLines(indent, _compilationDescription.DocComments);
            _buffer.AppendFormat(Templates.ClassDocCommentsSectionEnd, indentString);
        }

        if (_attributeContext.IncludeCompilationOptions || _attributeContext.IncludeAll)
        {
            _buffer.AppendFormat(Templates.ClassDocCommentsSectionBegin, indentString, "Compilation Options");
            AppendIndentedLines(indent, _compilationDescription.OptionsDocComments);
            _buffer.AppendFormat(Templates.ClassDocCommentsSectionEnd, indentString);
        }

        if (_attributeContext.IncludeCompilationAssembly || _attributeContext.IncludeAll)
        {
            _buffer.AppendFormat(Templates.ClassDocCommentsSectionBegin, indentString, "Compilation Assembly");
            AppendIndentedLines(indent, _compilationDescription.AssemblyDocComments);
            _buffer.AppendFormat(Templates.ClassDocCommentsSectionEnd, indentString);
        }

        if (_attributeContext.IncludeCompilationReferences || _attributeContext.IncludeAll)
        {
            _buffer.AppendFormat(Templates.ClassDocCommentsSectionBegin, indentString, "Compilation References");
            AppendIndentedLines(indent, _compilationDescription.ReferencesDocComments);
            _buffer.AppendFormat(Templates.ClassDocCommentsSectionEnd, indentString);
        }

        if (_attributeContext.IncludeParseOptions || _attributeContext.IncludeAll)
        {
            _buffer.AppendFormat(Templates.ClassDocCommentsSectionBegin, indentString, "Parse Options");
            AppendIndentedLines(indent, _parseOptionsDescription.DocComments);
            _buffer.AppendFormat(Templates.ClassDocCommentsSectionEnd, indentString);
        }

        if (_attributeContext.IncludeAdditionalTexts || _attributeContext.IncludeAll)
        {
            _buffer.AppendFormat(Templates.ClassDocCommentsSectionBegin, indentString, "Additional Texts");
            // todo: indent
            _buffer.AddComment("Number of Additional Texts", _additionalTextDescriptions.Length);
            foreach (var additionalTextDescription in _additionalTextDescriptions)
            {
                AppendIndentedLines(indent, additionalTextDescription.DocComments);
                if (_attributeContext.IncludeAdditionalTextsOptions)
                {
                    AppendIndentedLines(indent, additionalTextDescription.OptionsComments);
                }
            }
            _buffer.AppendFormat(Templates.ClassDocCommentsSectionEnd, indentString);
        }

        if (_attributeContext.IncludeMetadataReferences || _attributeContext.IncludeAll)
        {
            _buffer.AppendFormat(Templates.ClassDocCommentsSectionBegin, indentString, "Metadata References");
            // todo: indent
            _buffer.AddComment("Number of Metadata References", _metadataReferenceDescriptions.Length);
            foreach (var metadataReferenceDescription in _metadataReferenceDescriptions)
            {
                AppendIndentedLines(indent, metadataReferenceDescription.DocComments);
            }
            _buffer.AppendFormat(Templates.ClassDocCommentsSectionEnd, indentString);
        }

        _buffer.AppendFormat(Templates.ClassDocCommentsEnd, indentString);
    }

    private void PartialTypeDeclaration(int indent = 0)
    {
        var genericTypes = _attributeContext.TypeParameters.Any()
            ? $"<{string.Join(",", _attributeContext.TypeParameters)}>"
            : string.Empty;
        _buffer.Append(' ', indent);
        _buffer.AppendFormat(
            "{0}{1}partial {2} {3}{4}",
            GetAccessibility(),
            GetStatic(),
            _attributeContext.RecordStructOrClass,
            _attributeContext.Name,
            genericTypes
        ).AppendLine();
    }

    private string GetAccessibility()
    {
        var accessibility = _attributeContext.DeclaredAccessibility;
        return GetAccessibility(accessibility);
    }

    private static string GetAccessibility(Accessibility accessibility)
    {
        return accessibility switch
        {
            Accessibility.Private => "private ",
            Accessibility.ProtectedAndInternal => "private protected ",
            Accessibility.Protected => "protected ",
            Accessibility.Internal => "internal ",
            Accessibility.ProtectedOrInternal => "protected internal ",
            Accessibility.Public => "public ",
            _ => throw new ArgumentOutOfRangeException(nameof(accessibility), accessibility, null)
        };
    }

    private string GetStatic() => _attributeContext.IsStatic ? "static " : "";

    private void AppendStartClass(int indent = 0)
    {
        var indentString = StringForIndent(indent);
        _buffer.Append(indentString);
        _buffer.AppendLine("{");
    }


    private void AppendEndClass(int indent = 0)
    {
        var indentString = StringForIndent(indent);
        _buffer.Append(indentString);
        _buffer.AppendLine("}");
    }

    private void EndParentClasses()
    {
        // Close parent classes if any
        if (_attributeContext.HasParentClasses)
        {
            var indent = (_attributeContext.ParentClasses.Length - 1) * 4;
            for (int i = 0; i < _attributeContext.ParentClasses.Length; i++)
            {
                AppendEndClass(indent);
                indent -= 4;
            }
        }
    }

    private void AppendDiagnosticLogs()
    {
        _buffer.AppendLine();
        _buffer.AppendLine("/* Diagnostic Log");
        LightweightTrace.Add(TrackingNames.DiagnosticLog_Written);
        LightweightTrace.GetTrace(_buffer, TrackingNames.TracingNames);
        _buffer.AppendLine("*/");
    }

    private static readonly Dictionary<int, string> IndentationCache = new();
    private string StringForIndent(int indent)
    {
        if (!IndentationCache.TryGetValue(indent, out var indentString))
        {
            indentString = new string(' ', indent);
            IndentationCache[indent] = indentString;
        }
        return indentString;
    }

    private void AppendIndentedLines(int indent, string lines)
    {
        var indentString = StringForIndent(indent);
        bool includeLineBreak = false;
        foreach (var line in lines.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries))
        {
            if (includeLineBreak)
            {
                _buffer.AppendLine();
            }
            _buffer.Append(indentString);
            _buffer.Append(line);
            includeLineBreak = true;
        }
    }
}
